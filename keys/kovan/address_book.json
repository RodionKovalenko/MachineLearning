{"0x67c00950e77c4023025e642b68f14831e8f7afa0":{"name":"creditRequest","meta":"{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"lei\",\"type\":\"bytes20\"},{\"name\":\"legalname\",\"type\":\"bytes32\"},{\"name\":\"legaladdress\",\"type\":\"bytes32\"},{\"name\":\"legalform\",\"type\":\"bytes32\"},{\"name\":\"kyc\",\"type\":\"bool\"},{\"name\":\"aml\",\"type\":\"bool\"},{\"name\":\"creditRating\",\"type\":\"bytes32\"}],\"name\":\"updateCounterparty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crId\",\"type\":\"uint256\"},{\"name\":\"comSF\",\"type\":\"bytes32\"},{\"name\":\"aml\",\"type\":\"bool\"},{\"name\":\"kyc\",\"type\":\"bool\"},{\"name\":\"approval\",\"type\":\"bool\"}],\"name\":\"updataCreditRequestStructuredFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lei\",\"type\":\"bytes20\"},{\"name\":\"serviceRequest\",\"type\":\"string\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"term\",\"type\":\"uint8\"}],\"name\":\"createCreditrequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lei\",\"type\":\"bytes20\"},{\"name\":\"legalname\",\"type\":\"bytes32\"},{\"name\":\"legaladdress\",\"type\":\"bytes32\"},{\"name\":\"legalform\",\"type\":\"bytes32\"}],\"name\":\"createCounterparty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crId\",\"type\":\"uint256\"},{\"name\":\"margin\",\"type\":\"bytes32\"},{\"name\":\"interestRate\",\"type\":\"bytes32\"},{\"name\":\"interestBaseRate\",\"type\":\"bytes32\"},{\"name\":\"comments\",\"type\":\"bytes32\"},{\"name\":\"conditions\",\"type\":\"bytes32\"}],\"name\":\"updateCreditRequestTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lei\",\"type\":\"bytes20\"}],\"name\":\"getCounterparty\",\"outputs\":[{\"name\":\"legalname\",\"type\":\"bytes32\"},{\"name\":\"legaladdress\",\"type\":\"bytes32\"},{\"name\":\"legalform\",\"type\":\"bytes32\"},{\"name\":\"kyc\",\"type\":\"bool\"},{\"name\":\"aml\",\"type\":\"bool\"},{\"name\":\"creditRating\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"crId\",\"type\":\"uint256\"}],\"name\":\"getCreditRequest2\",\"outputs\":[{\"name\":\"comTreasury\",\"type\":\"bytes32\"},{\"name\":\"condTreasury\",\"type\":\"bytes32\"},{\"name\":\"condRisk\",\"type\":\"bytes32\"},{\"name\":\"approvedSF\",\"type\":\"bool\"},{\"name\":\"approvedRisk\",\"type\":\"bool\"},{\"name\":\"pdfString\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crId\",\"type\":\"uint256\"},{\"name\":\"creditRating\",\"type\":\"bytes32\"},{\"name\":\"comments\",\"type\":\"bytes32\"},{\"name\":\"conditions\",\"type\":\"bytes32\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"updateCreditRequestRisk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastCreditId\",\"outputs\":[{\"name\":\"crId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"crId\",\"type\":\"uint256\"}],\"name\":\"getCreditRequest1\",\"outputs\":[{\"name\":\"serviceRequest\",\"type\":\"string\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"term\",\"type\":\"uint8\"},{\"name\":\"interestRate\",\"type\":\"bytes32\"},{\"name\":\"interestBaseRate\",\"type\":\"bytes32\"},{\"name\":\"margin\",\"type\":\"bytes32\"},{\"name\":\"comRisk\",\"type\":\"bytes32\"},{\"name\":\"comSF\",\"type\":\"bytes32\"},{\"name\":\"lei\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lei\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"legalname\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"legaladdress\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"legalform\",\"type\":\"bytes32\"}],\"name\":\"CounterpartyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lei\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"serviceRequest\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"volume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"term\",\"type\":\"uint8\"}],\"name\":\"CreditRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"crId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comSF\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"aml\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"kyc\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"approval\",\"type\":\"bool\"}],\"name\":\"CrIdUpdatedSF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"crId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditRating\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"comments\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"conditions\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"CrIdUpdateRisk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"crId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"margin\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"interestRate\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"interestBaseRate\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"comments\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"conditions\",\"type\":\"bytes32\"}],\"name\":\"CrIdUpdateTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lei\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"legalname\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"legaladdress\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"legalform\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"kyc\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"aml\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"creditRating\",\"type\":\"bytes32\"}],\"name\":\"CounterpartyUpdated\",\"type\":\"event\"}],\"contract\":true,\"deleted\":false,\"timestamp\":1526301185693,\"name\":\"creditRequest\",\"description\":\"\",\"source\":\"pragma solidity ^0.4.23;\\r\\n\\r\\n\\r\\ncontract creditRequestContract {\\r\\n\\r\\nstruct counterparty {\\r\\n    bytes32 legalname;\\r\\n    bytes32 legaladdress;\\r\\n    bytes32 legalform; \\r\\n    bool kyc; \\r\\n    bool aml; \\r\\n    bytes32 creditRating; \\r\\n    uint listPointer; // if necessary?\\r\\n    bool exists; \\r\\n}\\r\\n\\r\\nmapping (bytes20 => counterparty) counterparties; \\r\\n\\r\\n\\r\\nstruct creditRequest{\\r\\n    string serviceRequest; \\r\\n    uint volume; \\r\\n    uint8 term; \\r\\n    bytes32 interestRate; \\r\\n    bytes32 interestBaseRate; \\r\\n    bytes32 margin; \\r\\n    bytes32 comRisk;\\r\\n    bytes32 comSF; \\r\\n    bytes32 comTreasury;\\r\\n    bytes32 condTreasury;\\r\\n    bytes32 condRisk; \\r\\n    bool approvedSF; \\r\\n    bool approvedRisk; \\r\\n    string pdfString;\\r\\n    bool exists; \\r\\n    uint listPointer; //if necessary\\r\\n    bytes20 lei;   \\r\\n}\\r\\nuint id=1; \\r\\n\\r\\nmapping (uint => creditRequest) creditRequests; \\r\\n\\r\\n\\r\\nevent CounterpartyCreated(\\r\\n   bytes20 lei, bytes32 legalname, bytes32 legaladdress, bytes32 legalform\\r\\n    );\\r\\n\\r\\n\\r\\nevent CreditRequestCreated(\\r\\nbytes20 lei, string serviceRequest, uint volume, uint8 term\\r\\n); \\r\\n\\r\\nevent CrIdUpdatedSF(\\r\\nuint crId, bytes32 comSF, bool aml, bool kyc, bool approval\\r\\n); \\r\\n\\r\\nevent CrIdUpdateRisk(\\r\\nuint crId, bytes32 creditRating, bytes32 comments, bytes32 conditions,bool approved\\r\\n);\\r\\nevent CrIdUpdateTreasury(\\r\\nuint crId, bytes32 margin, bytes32 interestRate, bytes32 interestBaseRate, bytes32 comments, bytes32 conditions\\r\\n); \\r\\n\\r\\nevent CounterpartyUpdated(\\r\\nbytes20 lei, bytes32 legalname, bytes32 legaladdress, bytes32 legalform,  bool kyc,  bool aml,  bytes32 creditRating\\r\\n);\\r\\n\\r\\n\\r\\nfunction createCounterparty(bytes20 lei, bytes32 legalname, bytes32 legaladdress, bytes32 legalform) public {\\r\\n\\r\\n    if(counterparties[lei].exists)     revert();\\r\\n    counterparty storage cStorage=counterparties[lei];\\r\\n    cStorage.legalname=legalname; \\r\\n    cStorage.legaladdress=legaladdress; \\r\\n    cStorage.legalform=legalform; \\r\\n    cStorage.exists=true; \\r\\n   emit CounterpartyCreated(lei, legalname, legaladdress, legalform);\\r\\n}\\r\\n\\r\\nfunction createCreditrequest(bytes20 lei, string serviceRequest, uint volume, uint8 term) public {\\r\\n    if(!counterparties[lei].exists)    revert();\\r\\n    creditRequest storage crStorage=creditRequests[id];\\r\\n    crStorage.serviceRequest=serviceRequest; \\r\\n    crStorage.volume=volume; \\r\\n    crStorage.term=term; \\r\\n    crStorage.lei=lei; \\r\\n    crStorage.exists=true; \\r\\n    id++; \\r\\n   emit CreditRequestCreated(lei, serviceRequest, volume, term);\\r\\n}\\r\\n\\r\\n\\r\\nfunction updataCreditRequestStructuredFinance(uint crId, bytes32 comSF, bool aml, bool kyc, bool approval) public {\\r\\n    if(!creditRequests[crId].exists) revert();\\r\\n    creditRequests[crId].comSF=comSF;\\r\\n    creditRequests[crId].approvedSF=approval;\\r\\n    counterparties[creditRequests[crId].lei].kyc=kyc; \\r\\n    counterparties[creditRequests[crId].lei].aml=aml; \\r\\n    emit CrIdUpdatedSF(crId, comSF, aml, kyc, approval);\\r\\n}\\r\\n\\r\\nfunction updateCreditRequestRisk(uint crId, bytes32 creditRating, bytes32 comments, bytes32 conditions, bool approved) public {\\r\\n    if(!creditRequests[crId].exists) revert();\\r\\n    counterparties[creditRequests[crId].lei].creditRating=creditRating; \\r\\n    creditRequests[crId].comRisk=comments; \\r\\n    creditRequests[crId].condRisk=conditions; \\r\\n    creditRequests[crId].approvedRisk=approved; \\r\\n    emit CrIdUpdateRisk(crId, creditRating, comments, conditions, approved);\\r\\n}\\r\\n\\r\\nfunction updateCreditRequestTreasury(uint crId, bytes32 margin, bytes32 interestRate, bytes32 interestBaseRate, bytes32 comments, bytes32 conditions) public {\\r\\n    if(!creditRequests[crId].exists) revert();\\r\\n    creditRequests[crId].margin=margin; \\r\\n    creditRequests[crId].interestRate=interestRate;\\r\\n    creditRequests[crId].interestBaseRate=interestBaseRate;\\r\\n    creditRequests[crId].comTreasury=comments; \\r\\n    creditRequests[crId].condTreasury=conditions; \\r\\n    emit CrIdUpdateTreasury(crId, margin, interestRate, interestBaseRate, comments, conditions); \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nfunction getCreditRequest1(uint crId) public view returns (\\r\\n    string serviceRequest,\\r\\n    uint volume, \\r\\n    uint8 term, \\r\\n    bytes32 interestRate, \\r\\n    bytes32 interestBaseRate, \\r\\n    bytes32 margin,\\r\\n    bytes32 comRisk,\\r\\n    bytes32 comSF,\\r\\n    bytes20 lei\\r\\n){\\r\\n    if(!creditRequests[crId].exists) revert();\\r\\n    creditRequest storage crStorage =creditRequests[crId];\\r\\n    return (\\r\\n        crStorage.serviceRequest,\\r\\n        crStorage.volume,\\r\\n        crStorage.term,\\r\\n        crStorage.interestRate,\\r\\n        crStorage.interestBaseRate,\\r\\n        crStorage.margin,\\r\\n        crStorage.comRisk,\\r\\n        crStorage.comSF,\\r\\n        crStorage.lei    \\r\\n    );\\r\\n}\\r\\n\\r\\n\\r\\nfunction getCreditRequest2(uint crId) public view returns (    \\r\\n    bytes32 comTreasury,\\r\\n    bytes32 condTreasury,\\r\\n    bytes32 condRisk,\\r\\n    bool approvedSF,\\r\\n    bool approvedRisk, \\r\\n    string pdfString\\r\\n){\\r\\n    if(!creditRequests[crId].exists) revert();\\r\\n    creditRequest storage crStorage =creditRequests[crId];\\r\\n    return(\\r\\n        crStorage.comTreasury,\\r\\n        crStorage.condTreasury, \\r\\n        crStorage.condRisk,\\r\\n        crStorage.approvedSF,\\r\\n        crStorage.approvedRisk,\\r\\n        crStorage.pdfString      \\r\\n    );\\r\\n}\\r\\n\\r\\n\\r\\nfunction getCounterparty(bytes20 lei) public view returns (\\r\\n    bytes32 legalname,\\r\\n    bytes32 legaladdress,\\r\\n    bytes32 legalform,\\r\\n    bool kyc,\\r\\n    bool aml, \\r\\n    bytes32 creditRating\\r\\n    \\r\\n) {\\r\\n    if(!counterparties[lei].exists) revert();\\r\\n    counterparty storage cStorage=counterparties[lei];\\r\\n    return (\\r\\n        cStorage.legalname,\\r\\n        cStorage.legaladdress,\\r\\n        cStorage.legalform,\\r\\n        cStorage.kyc,\\r\\n        cStorage.aml,\\r\\n        cStorage.creditRating         \\r\\n    );\\r\\n}\\r\\n\\r\\nfunction getLastCreditId() public view returns (uint crId) {\\r\\n    return id; \\r\\n}\\r\\n\\r\\nfunction updateCounterparty(bytes20 lei, bytes32 legalname, bytes32 legaladdress, bytes32 legalform,  bool kyc,  bool aml,  bytes32 creditRating) public {\\r\\n    if(!counterparties[lei].exists) revert();\\r\\n    counterparties[lei].legalname=legalname;\\r\\n    counterparties[lei].legaladdress=legaladdress;\\r\\n    counterparties[lei].legalform=legalform;\\r\\n    counterparties[lei].kyc=kyc;\\r\\n    counterparties[lei].aml=aml;\\r\\n    counterparties[lei].creditRating=creditRating;\\r\\n    emit CounterpartyUpdated(lei, legalname, legaladdress, legalform,  kyc,  aml, creditRating);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\",\"deployment\":true,\"blockNumber\":7283843}","uuid":null}}