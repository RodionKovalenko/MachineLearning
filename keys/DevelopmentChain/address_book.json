{"0x429a8076a1d4e2ec8685ef1b45b643f84ca46801":{"name":"TEST","meta":"{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_louAddress\",\"type\":\"address\"}],\"name\":\"registerLOU\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_legalEntityIdentifier\",\"type\":\"string\"},{\"name\":\"_legalName\",\"type\":\"string\"},{\"name\":\"_legalStreet\",\"type\":\"string\"},{\"name\":\"_legalPostcode\",\"type\":\"uint256\"},{\"name\":\"_legalCity\",\"type\":\"string\"},{\"name\":\"_legalCountry\",\"type\":\"string\"},{\"name\":\"_legalState\",\"type\":\"string\"},{\"name\":\"_hqStreet\",\"type\":\"string\"},{\"name\":\"_hqPostcode\",\"type\":\"uint256\"},{\"name\":\"_hqCity\",\"type\":\"string\"},{\"name\":\"_hqCountry\",\"type\":\"string\"},{\"name\":\"_hqState\",\"type\":\"string\"}],\"name\":\"addLegalEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indLegalEntityIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"indLegalName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addressid\",\"type\":\"uint256\"}],\"name\":\"addedLEIPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indLegalEntityIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"indLegalName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"legalEntityIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"legalName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_legalStreet\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_legalPostcode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_legalCity\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_legalCountry\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_legalState\",\"type\":\"string\"}],\"name\":\"updatedLEIDataBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indLegalEntityIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"indLegalName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hqStreet\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hqPostcode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hqCity\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hqCountry\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hqState\",\"type\":\"string\"}],\"name\":\"addHQAddress\",\"type\":\"event\"}],\"contract\":true,\"deleted\":false,\"timestamp\":1514478352945,\"name\":\"TEST\",\"description\":\"\",\"source\":\"pragma solidity ^0.4.14;\\r\\ncontract LegalEntityIdentifier {\\r\\n\\r\\n    struct EntityData {\\r\\n        string legalEntityIdentifier;\\r\\n        string legalName;\\r\\n        Address legalAddress;\\r\\n        Address hqAddress;\\r\\n    }\\r\\n\\r\\n    struct Address{\\r\\n        string street;\\r\\n        uint postcode;\\r\\n        string city;\\r\\n        string country;\\r\\n        string state;\\r\\n    }\\r\\n\\r\\n    address owner;\\r\\n    \\r\\n    event addedLEIPosition(\\r\\n        string indexed indLegalEntityIdentifier, string indexed indLegalName,\\r\\n        uint addressid\\r\\n        );\\r\\n\\r\\n    // Events are called when Legal Entity Data gets updated/added.\\r\\n    event updatedLEIDataBase(\\r\\n        string indexed indLegalEntityIdentifier, string indexed indLegalName, \\r\\n        string legalEntityIdentifier, string legalName, \\r\\n        string _legalStreet, uint _legalPostcode, string _legalCity, string _legalCountry, string _legalState \\r\\n        );\\r\\n        \\r\\n    event addHQAddress(\\r\\n        string indexed indLegalEntityIdentifier, string indexed indLegalName,\\r\\n        string _hqStreet, uint _hqPostcode, string _hqCity, string _hqCountry, string _hqState\\r\\n        );\\r\\n    \\r\\n    //functionality needs to be implemented (only LOU can register LEI), allows setting wallet addresses as belonging to a lou\\r\\n    mapping (address => bool) isLOU;\\r\\n    \\r\\n    // Number of currently saved entries in the LegalEntities mapping\\r\\n    uint numLEI;\\r\\n    \\r\\n    // Does the contract need to know all Legal Entities Data or should the frontend handle this?\\r\\n    mapping (uint => EntityData) LegalEntities; \\r\\n\\r\\n    function LegalEntityIdentifier (){\\r\\n    \\towner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function registerLOU (address _louAddress){\\r\\n    \\tisLOU[_louAddress] = true;\\r\\n    }\\r\\n    \\r\\n    function addLegalEntity (string _legalEntityIdentifier, string _legalName, string _legalStreet, uint _legalPostcode, string _legalCity, string _legalCountry, string _legalState, string _hqStreet, uint _hqPostcode, string _hqCity, string _hqCountry, string _hqState){\\r\\n        \\r\\n        if(isLOU[msg.sender]){\\r\\n            uint addressid = numLEI++;\\r\\n        \\r\\n            LegalEntities[addressid] = EntityData(_legalEntityIdentifier, _legalName, Address(_legalStreet, _legalPostcode, _legalCity, _legalCountry, _legalState), Address(_hqStreet, _hqPostcode, _hqCity, _hqCountry, _hqState));\\r\\n        \\r\\n            addedLEIPosition(_legalEntityIdentifier, _legalName, addressid);\\r\\n        \\r\\n            updateLEIDataBase(addressid);\\r\\n        }\\r\\n    }\\r\\n    //Pushes the LEIData in the event log.\\r\\n    function updateLEIDataBase (uint addressid) internal{\\r\\n    \\tEntityData storage le = LegalEntities[addressid];\\r\\n    \\tupdatedLEIDataBase(\\r\\n            le.legalEntityIdentifier, le.legalName, \\r\\n            le.legalEntityIdentifier, le.legalName, \\r\\n            le.legalAddress.street, le.legalAddress.postcode, le.legalAddress.city, le.legalAddress.country, le.legalAddress.state\\r\\n            );\\r\\n        addHQAddress(\\r\\n            le.legalEntityIdentifier, le.legalName,\\r\\n            le.hqAddress.street, le.hqAddress.postcode, le.hqAddress.city, le.hqAddress.country, le.hqAddress.state\\r\\n            );\\r\\n    }\\r\\n    \\r\\n    \\r\\n    // Request a specific LEI and its data.\\r\\n/*    function getEntityData(uint _addressid) internal returns (EntityData entityData_){\\r\\n        if(_addressid < numLEI){\\r\\n            entityData_ = LegalEntities[_addressid];\\r\\n//            legalEntityIdentifier_ = LegalEntities[_addressid].legalEntityIdentifier;\\r\\n//            legalName_ = LegalEntities[_addressid].legalName;\\r\\n//            data_ = LegalEntities[_addressid].data;\\r\\n        }\\r\\n        else return;\\r\\n    }\\r\\n\\r\\n    //Unfinished\\r\\n    function changeEntityData(uint _addressid, uint _data) returns (bool){\\r\\n        if(_addressid < numLEI){\\r\\n            LegalEntities[_addressid].data = _data;\\r\\n            EntityData legalEntity = LegalEntities[_addressid];\\r\\n//            updatedLEIDataBase(legalEntity.legalEntityIdentifier, legalEntity.legalName, legalEntity.data , _addressid);\\r\\n            return true; \\r\\n        }\\r\\n        else return false;\\r\\n    }\\r\\n*/\\r\\n}\",\"deployment\":true,\"blockNumber\":2}","uuid":null}}